package OnlineStore.services;

import OnlineStore.entities.Cart;


public interface CartService  {
     /*
      Сервис работы с "тележкой" пользователя, в которой лежат товары
       реализует следующие функции
       1 - Получение тележки по идентификатору
       2 - Изменение количества товара в тележке (как добавление так и удаление)
       3 - Удалние из тележки всех единиц заданного товара
       4- Полная очистка тележки\ Удаление всех товаров

       Планируется добавление функции "Заказа" корзины
       т.е. все содержимое корзины переместиться в заказ.
       Корзина при этом станет пустой
     */

    /**
     *  Функция изменени количества товара в тележке
     * @param userId Идентификатор владельца тележки
     * @param prodId Идентификатор товара
     * @param count Добавляемое количество товара, может быть как положительным, так и отрицательным.
     *              При этом реализуется функция как добавления так и удаления товара из корзины
     * @return Возвращает объект тележку с уже изменённым количеством товара. Тележка предварительн сохранена в БД
     */
    Cart alterProductCount(int userId, int prodId, int count);

    /**
     *  Получить тележку по идентификатору
     * @param id Идентификатор тележки
     * @return объект тележку типа Cart
     */
     Cart getCartById(int id);

    /**
     *
     * @param userId Идентификатор пользователя
     * @return ВОзвращает тележку пользователя с идентификатором userId
     */
     Cart getCartByUserId(int userId);

    /**
     * Удаляет из тележки все имеющиеся единицы товара, идентификатор которого prodId
     * @param userId Идентификатор владельца тележки
     * @param prodId Идентификатор товара
     * @return Возвращает объект тележку с уже изменённым количеством товара. Тележка предварительн сохранена в БД
     */
     Cart removeAllSpecificProduct(int userId, int prodId);

    /**
     *  Очищает тележку - удаляет из неё все имеющиеся товары
     * @param userId Идентификатор владельца тележки
     * @return Возвращает объект тележку с уже изменённым количеством товара. Тележка предварительн сохранена в БД
     */
     Cart removeAllProducts(int userId);

    /**
     *  Создаёт для пользователя новую корзину
     *  используется для автоматического прикрепления новой корзины
     *  к вновь зарегистрированному пользователи или
     *  при покупке\заказе корзины
     * @param userId идентификатор пользователя, к которому прикрепляется новая корзина
     */
    void attachNewCartToUser(int userId);

    /**
     *  Заказывает\покупает содержимое тележки
     *  т.е. опустошает текущую тележку пользователя и
     *  переносит все товары из неё в заказ
     * @param cartId    Идентификатор тележки
     * @param deliveryAddress   Адрес доставки
     */
    void purchaseCart(int cartId, String deliveryAddress);
}
